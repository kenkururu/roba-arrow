#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 6
#define NUM 6

&mt {
    quick-tap-ms = <250>;
    tapping-term-ms = <200>;
    flavor = "balanced";
};

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

&sl { release-after-ms = <500>; };

/ {
    combos {
        compatible = "zmk,combos";

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <0 1>;
            layers = <1>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        hat {
            bindings = <&kp CARET>;
            key-positions = <10 11>;
            layers = <1>;
        };

        middle_click {
            bindings = <&mkp MCLK>;
            key-positions = <18 19>;
            layers = <4>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <22 33>;
        };
    };

    macros {
        /**
        * Temporarily switches to a layer (`&mo`) while a modifier is held.
        * Analogous to QMK's `LM()`, using a parameterized macro.
        *
        * Params:
        *  1. Layer to switch to
        *  2. Modifier to press while layer is active
        *
        * Example:
        *  `&lm NUM_LAYER LSHIFT`
        */

        lm_unAML: lm_unAML {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&unAML>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        td_ZenkakuHankku_unAML: td_ZenkakuHankku_unAML {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&td_ZenkakuHankaku &unAML>;
            label = "TD_ZENKAKUHANKKU_UNAML";
        };

        kp_unAML: kp_unAML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &unAML>;
            label = "KP_UNAML";
        };

        mod_unAML: mod_unAML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&unAML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "MOD_UNAML";
        };

        mo_unAML: mo_unAML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&unAML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>;

            label = "MO_UNAML";
        };

        mo_unAML_disable_alt_ctrl: mo_unAML_disable_alt_ctrl {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&unAML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&disable_alt_ctrl>;

            label = "MO_UNAML_DISABLE_ALT_CTRL";
        };

        mo_with_enter_on_release: mo_with_enter_on_release {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp ENTER>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>;

            label = "MO_WITH_ENTER_ON_RELEASE";
        };

        unAML: unAML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 4>;
            label = "UNAML";
        };

        kp_with_kt_on: kp_with_kt_on {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kt_on MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "KP_WITH_KT_ON";
        };

        disable_alt_ctrl: disable_alt_ctrl {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&to 0 &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL>;
            label = "DISABLE_ALT_CTRL";
        };

        kp_with_sl: sl_5 {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
            label = "SL_5";
        };

        tab_with_kt_on_and_sl: kt_on_kp_with_sl {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kt_on MACRO_PLACEHOLDER &macro_param_2to2 &kp_with_sl TAB MACRO_PLACEHOLDER>;
            label = "KT_ON_KP_WITH_SL";
        };
    };

    behaviors {
        tog_on: toggle_layer_on {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "off";
        };

        kt_on: key_toggle_on_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle On";
            toggle-mode = "on";

            // reference: https://zmk.dev/docs/keymaps/behaviors/key-toggle
        };

        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";

            // reference: https://zmk.dev/docs/keymaps/behaviors/key-toggle
        };

        td_right_click: td_right_click {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RIGHT_CLICK";
            #binding-cells = <0>;
            bindings = <&mkp RCLK>, <&kp LC(W)>;

            tapping-term-ms = <250>;
        };

        td_colon: td_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COLON";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            tapping-term-ms = <250>;
        };

        td_q_escape: td_q_escape {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Q_ESCAPE";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp Q>, <&kp ESCAPE>;
        };

        td_ZenkakuHankaku: td_ZenkakuHankaku {
            compatible = "zmk,behavior-tap-dance";

            // compatible = "zmk,behavior-eager-tap-dance";

            label = "TD_ZENKAKUHANKAKU";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LANGUAGE_2>, <&kp LANGUAGE_1>;
        };

        mod_morph_exclamation: mod_morph_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_EXCLAMATION";
            bindings = <&kp COMMA>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mod_morph_question: mod_morph_question {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_QUESTION";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mod_morph_slash: mod_morph_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_SLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_alt_f4: td_alt_f4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ALT_F4";
            #binding-cells = <0>;
            bindings = <&kp F4>, <&kp LA(F4)>;

            tapping-term-ms = <250>;
        };

        lt_unAML: lt_unAML {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_UNAML";
            bindings = <&mo_unAML>, <&kp_unAML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        lt_unAML_disable_alt_ctrl: lt_unAML_disable_alt_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_UNAML_DISABLE_ALT_CTRL";
            bindings = <&mo_unAML_disable_alt_ctrl>, <&kp_unAML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        lt_unAML_weak: lt_unAML_weak {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_UNAML_WEAK";
            bindings = <&mo_unAML>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        mt_unAML: mt_unAML {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_UNAML";
            bindings = <&mod_unAML>, <&kp_unAML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&kp_unAML Q             &kp_unAML W             &kp_unAML E   &kp_unAML R              &lt_unAML 7 T                                                                        &lt_unAML 7 Y                   &kp_unAML U  &kp_unAML I             &kp_unAML O          &lt_unAML 5 P
&mt_unAML LCTRL A       &kp_unAML S             &kp_unAML D   &kp_unAML F              &kp_unAML G                     &kp_unAML LS(LG(S))      &msc SCRL_UP                &kp_unAML H                     &kp_unAML J  &kp_unAML K             &kp_unAML L          &lt_unAML 6 MINUS
&mt_unAML LEFT_SHIFT Z  &mt_unAML LEFT_SHIFT X  &kp_unAML C   &kp_unAML V              &lt_unAML_disable_alt_ctrl 3 B  &none                    &msc SCRL_DOWN              &lt_unAML_disable_alt_ctrl 3 N  &kp_unAML M  &mod_morph_exclamation  &mod_morph_question  &mod_morph_slash
&kp LCTRL               &kp LEFT_WIN            &kp LEFT_ALT  &td_ZenkakuHankku_unAML  &lt_unAML 2 SPACE               &lt_unAML 1 TAB          &lt_unAML_weak 1 BACKSPACE  &lt_unAML 2 ENTER                                                                         &mt_unAML LEFT_SHIFT ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp A B>;
        };

        Numpad_and_Symbols {
            bindings = <
&kp PLUS             &kp N7               &kp N8               &kp N9  &kp MINUS                                  &kp AT_SIGN       &kp LEFT_BRACE              &kp RIGHT_BRACE              &kp DOUBLE_QUOTES  &td_colon
&kp ASTERISK         &kp N4               &kp N5               &kp N6  &kp SLASH    &kp EQUAL      &kp SEMICOLON  &kp HASH          &kp_unAML LEFT_PARENTHESIS  &kp_unAML RIGHT_PARENTHESIS  &kp SINGLE_QUOTE   &kp TILDE
&lt 2 N0             &kp N1               &kp N2               &kp N3  &kp PERCENT  &kp CARET      &trans         &kp AMPERSAND     &kp LEFT_BRACKET            &kp RIGHT_BRACKET            &kp GRAVE          &kp PIPE
&mt LCTRL BACKSPACE  &mt LEFT_WIN PERIOD  &mt LEFT_ALT PERIOD  &trans  &kp ENTER    &trans         &kp LESS_THAN  &kp GREATER_THAN                                                                              &kp DOLLAR
            >;

            sensor-bindings = <&inc_dec_kp LC(PLUS) LC(MINUS)>;
        };

        Functions_and_Controls {
            bindings = <
&kp LS(F11)          &kp F1          &kp F2          &kp F3           &td_alt_f4                                               &kp F6        &kp F7          &kp F8              &kp F11    &kp F12
&kp LA(PRINTSCREEN)  &kp LS(LG(S))   &kp UP_ARROW    &none            &kp F5      &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp F5        &kp_unAML HOME  &kp_unAML UP_ARROW  &kp END    &kp F9
&kp LEFT_SHIFT       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none       &kp EQUAL                    &kp LC(HOME)    &kp LC(LEFT)  &kp LEFT        &kp DOWN            &kp RIGHT  &kp LC(RIGHT)
&kp LCTRL            &kp LEFT_WIN    &kp LEFT_ALT    &trans           &trans      &trans                       &kp DELETE      &trans                                                       &kp PIPE
            >;
        };

        Misc {
            bindings = <
&tab_with_kt_on_and_sl LEFT_ALT 5  &kp LC(LG(LEFT))        &kp LG(TAB)       &kp LG(LC(RIGHT))        &td_alt_f4                      &td_alt_f4         &kp LC(W)              &kp LS(LC(T))       &kp LC(T)          &kp_with_kt_on LEFT_ALT TAB
&tab_with_kt_on_and_sl LCTRL 6     &kp LG(LS(LEFT_ARROW))  &kp LG(UP_ARROW)  &kp LG(LS(RIGHT_ARROW))  &trans      &trans      &trans  &kp K_VOLUME_UP    &kp_unAML LC(PAGE_UP)  &kp_unAML UP_ARROW  &kp LC(PAGE_DOWN)  &kp LS(TAB)
&kp LA(LC(LG(DOWN)))               &kp LG(LEFT_ARROW)      &kp LG(DOWN)      &kp LG(LS(RIGHT_ARROW))  &trans      &trans      &trans  &kp K_VOLUME_DOWN  &kp LA(LEFT)           &kp DOWN            &kp LA(RIGHT)      &trans
&trans                             &trans                  &trans            &trans                   &trans      &trans      &trans  &trans                                                                           &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans     &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp LCLK  &td_right_click  &trans  &mo 6
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                      &trans
            >;
        };

        Media {
            bindings = <
&kp TAB      &trans  &trans  &trans  &trans                      &kp C_PREV         &kp C_PLAY_PAUSE   &kp C_NEXT       &trans  &kp TAB
&kp LS(TAB)  &trans  &trans  &trans  &trans  &trans      &trans  &kp C_VOLUME_DOWN  &kp C_MUTE         &kp C_VOLUME_UP  &trans  &kp LS(TAB)
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans             &kp LS(LA(LC(M)))  &trans           &trans  &trans
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                         &trans
            >;
        };

        Extra_Functions {
            bindings = <
&kp LS(TAB)  &trans  &trans  &trans  &trans                      &kp F13  &kp F14  &kp F15  &kp F16  &kp LS(TAB)
&kp TAB      &trans  &trans  &trans  &trans  &trans      &trans  &kp F17  &kp F18  &kp F19  &kp F20  &kp TAB
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &kp F21  &kp F22  &kp F23  &kp F24  &trans
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        Configuration {
            bindings = <
&bootloader  &none  &none  &none  &none                           &none         &kt_on LEFT_ALT  &kp TAB       &kt_off LEFT_ALT  &bootloader
&none        &none  &none  &none  &none  &none      &none         &none         &none            &none         &none             &none
&none        &none  &none  &none  &none  &none      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4      &bt BT_CLR
&none        &none  &none  &none  &none  &none      &none         &none                                                          &bt BT_CLR_ALL
            >;
        };
    };
};
