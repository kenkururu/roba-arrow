#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 6
#define NUM 6

&mt {
    quick-tap-ms = <250>;
    tapping-term-ms = <250>;
};

&lt {
    tapping-term-ms = <250>;
    quick-tap-ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <0 1>;
            layers = <1>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        hat {
            bindings = <&kp CARET>;
            key-positions = <10 11>;
            layers = <1>;
        };

        middle_click {
            bindings = <&mkp MCLK>;
            key-positions = <18 19>;
            layers = <4>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        hold_alt: hold_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_ALT>;

            label = "HOLD_ALT";
        };

        release_alt_on_release: release_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "RELEASE_ALT";
        };

        lt_with_alt_ctrl_release: lt_with_alt_ctrl_release {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LCTRL &macro_param_1to1 &mo MACRO_PLACEHOLDER>;

            label = "LT_WITH_ALT_CTRL_RELEASE";
        };

        ctrl_alt_tab: alt_tab {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&kp TAB>;

            label = "ALT_TAB";
        };

        /**
        * Temporarily switches to a layer (`&mo`) while a modifier is held.
        * Analogous to QMK's `LM()`, using a parameterized macro.
        *
        * Params:
        *  1. Layer to switch to
        *  2. Modifier to press while layer is active
        *
        * Example:
        *  `&lm NUM_LAYER LSHIFT`
        */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        lm_alt: lm_alt {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &lm MACRO_PLACEHOLDER LEFT_ALT>;
            label = "LM_ALT";
        };

        td_ZenkakuHankku_to_layer_0: td_ZenkakuHankku_to_layer_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &td_ZenkakuHankaku>;
            label = "TD_ZENKAKUHANKKU_TO_LAYER_0";
        };

        kp_with_disable_mouse_layer: disable_mouse_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog_off 4 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "DISABLE_MOUSE_LAYER";
        };

        mo_with_disable_mouse_layer: mo_with_disable_mouse_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &tog_off 0>;

            label = "MO_WITH_DISABLE_MOUSE_LAYER";
        };
    };

    behaviors {
        tog_on: toggle_layer_on {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "off";
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_right_click: td_right_click {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RIGHT_CLICK";
            #binding-cells = <0>;
            bindings = <&mkp RCLK>, <&kp LC(W)>;

            tapping-term-ms = <250>;
        };

        td_colon: td_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COLON";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            tapping-term-ms = <250>;
        };

        td_q_escape: td_q_escape {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Q_ESCAPE";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp Q>, <&kp ESCAPE>;
        };

        td_ZenkakuHankaku: td_ZenkakuHankaku {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ZENKAKUHANKAKU";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LANGUAGE_2>, <&kp LANGUAGE_1>;
        };

        mod_morph_exclamation: mod_morph_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_EXCLAMATION";
            bindings = <&kp COMMA>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mod_morph_question: mod_morph_question {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_QUESTION";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mod_morph_slash: mod_morph_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_SLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lt_with_alt: lt_with_alt {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_WITH_ALT";
            bindings = <&lm_alt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        td_alt_f4: td_alt_f4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ALT_F4";
            #binding-cells = <0>;
            bindings = <&kp F4>, <&kp LA(F4)>;

            tapping-term-ms = <250>;
        };

        lt_with_disable_mouse_layer: lt_with_disable_mouse_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_WITH_DISABLE_MOUSE_LAYER";
            bindings = <&mo_with_disable_mouse_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&kp Q             &kp W             &kp E         &kp R                         &lt 7 T                                                                                                                 &lt 7 Y                               &kp U  &kp I                   &kp O                &lt 5 P
&mt LCTRL A       &kp S             &kp D         &kp F                         &kp G                                 &kp LS(LG(S))                           &lm 3 LCTRL                               &kp H                                 &kp J  &kp K                   &kp L                &lt 6 MINUS
&mt LEFT_SHIFT Z  &mt LEFT_SHIFT X  &kp C         &kp V                         &lt 3 B                               &lm 3 LEFT_ALT                          &lm 3 LEFT_ALT                            &lt 3 N                               &kp M  &mod_morph_exclamation  &mod_morph_question  &mod_morph_slash
&kp LCTRL         &kp LEFT_WIN      &kp LEFT_ALT  &td_ZenkakuHankku_to_layer_0  &lt_with_disable_mouse_layer 2 SPACE  &lt_with_disable_mouse_layer 1 TAB      &lt_with_disable_mouse_layer 1 BACKSPACE  &lt_with_disable_mouse_layer 2 ENTER                                                      &mt LEFT_SHIFT ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp C_AC_ZOOM_OUT C_AC_ZOOM_IN>;
        };

        Numpad_and_Symbols {
            bindings = <
&kp PLUS             &kp N7               &kp N8               &kp N9  &kp MINUS                                  &kp AT_SIGN       &kp LEFT_BRACE                                 &kp RIGHT_BRACE                                 &kp DOUBLE_QUOTES  &td_colon
&kp ASTERISK         &kp N4               &kp N5               &kp N6  &kp SLASH    &kp EQUAL      &kp SEMICOLON  &kp HASH          &kp_with_disable_mouse_layer LEFT_PARENTHESIS  &kp_with_disable_mouse_layer RIGHT_PARENTHESIS  &kp SINGLE_QUOTE   &kp TILDE
&lt 2 N0             &kp N1               &kp N2               &kp N3  &kp PERCENT  &kp CARET      &trans         &kp AMPERSAND     &kp LEFT_BRACKET                               &kp RIGHT_BRACKET                               &kp GRAVE          &kp PIPE
&mt LCTRL BACKSPACE  &mt LEFT_WIN PERIOD  &mt LEFT_ALT PERIOD  &trans  &kp ENTER    &trans         &kp LESS_THAN  &kp GREATER_THAN                                                                                                                    &kp DOLLAR
            >;

            sensor-bindings = <&inc_dec_kp LC(PLUS) LC(MINUS)>;
        };

        Functions_and_Controls {
            bindings = <
&kp LS(F11)          &kp F1          &kp F2          &kp F3           &td_alt_f4                                               &kp F6        &kp F7                             &kp F8                                 &kp F11    &kp F12
&kp LA(PRINTSCREEN)  &kp LS(LG(S))   &kp UP_ARROW    &none            &kp F5      &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp F5        &kp_with_disable_mouse_layer HOME  &kp_with_disable_mouse_layer UP_ARROW  &kp END    &kp F9
&kp LEFT_SHIFT       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none       &kp EQUAL                    &kp LC(HOME)    &kp LC(LEFT)  &kp LEFT                           &kp DOWN                               &kp RIGHT  &kp LC(RIGHT)
&kp LCTRL            &kp LEFT_WIN    &kp LEFT_ALT    &trans           &trans      &trans                       &kp DELETE      &trans                                                                                             &kp PIPE
            >;
        };

        Misc {
            bindings = <
&kp TAB               &kp LC(LG(LEFT))        &kp LG(TAB)       &kp LG(LC(RIGHT))        &td_alt_f4                      &td_alt_f4         &kp LC(W)                                 &kp LS(LC(T))                          &kp LC(T)          &kp TAB
&kp LS(TAB)           &kp LG(LS(LEFT_ARROW))  &kp LG(UP_ARROW)  &kp LG(LS(RIGHT_ARROW))  &trans      &trans      &trans  &kp K_VOLUME_UP    &kp_with_disable_mouse_layer LC(PAGE_UP)  &kp_with_disable_mouse_layer UP_ARROW  &kp LC(PAGE_DOWN)  &kp LS(TAB)
&kp LA(LC(LG(DOWN)))  &kp LG(LEFT_ARROW)      &kp LG(DOWN)      &kp LG(LS(RIGHT_ARROW))  &trans      &trans      &trans  &kp K_VOLUME_DOWN  &kp LA(LEFT)                              &kp DOWN                               &kp LA(RIGHT)      &trans
&trans                &trans                  &trans            &trans                   &trans      &trans      &trans  &trans                                                                                                                 &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans     &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp LCLK  &td_right_click  &trans  &mo 6
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                      &trans
            >;
        };

        Media {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp K_PREV         &kp K_PLAY_PAUSE   &kp C_NEXT       &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp C_VOLUME_DOWN  &kp C_MUTE         &kp C_VOLUME_UP  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans             &kp LS(LA(LC(M)))  &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                         &trans
            >;
        };

        Extra_Functions {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp F13  &kp F14  &kp F15  &kp F16  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp F17  &kp F18  &kp F19  &kp F20  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp F21  &kp F22  &kp F23  &kp F24  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        Configuration {
            bindings = <
&bootloader  &trans  &trans  &trans  &trans                            &trans        &trans        &trans        &trans        &bootloader
&trans       &trans  &trans  &trans  &trans  &trans      &trans        &trans        &trans        &trans        &kp C_SLEEP   &trans
&trans       &trans  &trans  &trans  &trans  &trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&trans       &trans  &trans  &trans  &trans  &trans      &trans        &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
